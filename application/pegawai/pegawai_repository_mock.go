// Code generated by MockGen. DO NOT EDIT.
// Source: application/pegawai/pegawai_repository.go

package pegawai

import (
	gomock "github.com/golang/mock/gomock"
	persistent "github.com/tiket/TIX-HOTEL-UTILITIES-GO/persistent"
	reflect "reflect"
)

// MockPegawaiRepository is a mock of PegawaiRepository interface
type MockPegawaiRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPegawaiRepositoryMockRecorder
}

// MockPegawaiRepositoryMockRecorder is the mock recorder for MockPegawaiRepository
type MockPegawaiRepositoryMockRecorder struct {
	mock *MockPegawaiRepository
}

// NewMockPegawaiRepository creates a new mock instance
func NewMockPegawaiRepository(ctrl *gomock.Controller) *MockPegawaiRepository {
	mock := &MockPegawaiRepository{ctrl: ctrl}
	mock.recorder = &MockPegawaiRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPegawaiRepository) EXPECT() *MockPegawaiRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockPegawaiRepository) Find(tx persistent.ORM) ([]Pegawai, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", tx)
	ret0, _ := ret[0].([]Pegawai)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockPegawaiRepositoryMockRecorder) Find(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPegawaiRepository)(nil).Find), tx)
}

// FindOne mocks base method
func (m *MockPegawaiRepository) FindOne(tx persistent.ORM, query interface{}, args ...interface{}) (*Pegawai, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{tx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(*Pegawai)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockPegawaiRepositoryMockRecorder) FindOne(tx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockPegawaiRepository)(nil).FindOne), varargs...)
}

// Create mocks base method
func (m *MockPegawaiRepository) Create(tx persistent.ORM, object *Pegawai) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockPegawaiRepositoryMockRecorder) Create(tx, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPegawaiRepository)(nil).Create), tx, object)
}

// Update mocks base method
func (m *MockPegawaiRepository) Update(tx persistent.ORM, object *Pegawai) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tx, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPegawaiRepositoryMockRecorder) Update(tx, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPegawaiRepository)(nil).Update), tx, object)
}

// Delete mocks base method
func (m *MockPegawaiRepository) Delete(tx persistent.ORM, object *Pegawai) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tx, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPegawaiRepositoryMockRecorder) Delete(tx, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPegawaiRepository)(nil).Delete), tx, object)
}

// WithTransaction mocks base method
func (m *MockPegawaiRepository) WithTransaction(block func(persistent.ORM) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction
func (mr *MockPegawaiRepositoryMockRecorder) WithTransaction(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockPegawaiRepository)(nil).WithTransaction), block)
}

// Tx mocks base method
func (m *MockPegawaiRepository) Tx() persistent.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(persistent.ORM)
	return ret0
}

// Tx indicates an expected call of Tx
func (mr *MockPegawaiRepositoryMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockPegawaiRepository)(nil).Tx))
}
