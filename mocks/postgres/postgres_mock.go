// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tiket/TIX-HOTEL-UTILITIES-GO/persistent (interfaces: ORM)

package postgres_mock

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	persistent "github.com/tiket/TIX-HOTEL-UTILITIES-GO/persistent"
	reflect "reflect"
)

// MockORM is a mock of ORM interface
type MockORM struct {
	ctrl     *gomock.Controller
	recorder *MockORMMockRecorder
}

// MockORMMockRecorder is the mock recorder for MockORM
type MockORMMockRecorder struct {
	mock *MockORM
}

// NewMockORM creates a new mock instance
func NewMockORM(ctrl *gomock.Controller) *MockORM {
	mock := &MockORM{ctrl: ctrl}
	mock.recorder = &MockORMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockORM) EXPECT() *MockORMMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockORM) All(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All
func (mr *MockORMMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockORM)(nil).All), arg0)
}

// Begin mocks base method
func (m *MockORM) Begin() persistent.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(persistent.ORM)
	return ret0
}

// Begin indicates an expected call of Begin
func (mr *MockORMMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockORM)(nil).Begin))
}

// BulkDelete mocks base method
func (m *MockORM) BulkDelete(arg0 string, arg1 []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete
func (mr *MockORMMockRecorder) BulkDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockORM)(nil).BulkDelete), arg0, arg1)
}

// BulkUpsert mocks base method
func (m *MockORM) BulkUpsert(arg0 string, arg1 int, arg2 []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert
func (mr *MockORMMockRecorder) BulkUpsert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockORM)(nil).BulkUpsert), arg0, arg1, arg2)
}

// Close mocks base method
func (m *MockORM) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockORMMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockORM)(nil).Close))
}

// Commit mocks base method
func (m *MockORM) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockORMMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockORM)(nil).Commit))
}

// Create mocks base method
func (m *MockORM) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockORMMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockORM)(nil).Create), arg0)
}

// CreateTable mocks base method
func (m *MockORM) CreateTable(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable
func (mr *MockORMMockRecorder) CreateTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockORM)(nil).CreateTable), arg0)
}

// CreateTableWithName mocks base method
func (m *MockORM) CreateTableWithName(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableWithName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTableWithName indicates an expected call of CreateTableWithName
func (mr *MockORMMockRecorder) CreateTableWithName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableWithName", reflect.TypeOf((*MockORM)(nil).CreateTableWithName), arg0, arg1)
}

// Delete mocks base method
func (m *MockORM) Delete(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockORMMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockORM)(nil).Delete), arg0)
}

// DropTable mocks base method
func (m *MockORM) DropTable(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable
func (mr *MockORMMockRecorder) DropTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockORM)(nil).DropTable), arg0)
}

// DropTableWithName mocks base method
func (m *MockORM) DropTableWithName(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTableWithName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTableWithName indicates an expected call of DropTableWithName
func (mr *MockORMMockRecorder) DropTableWithName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTableWithName", reflect.TypeOf((*MockORM)(nil).DropTableWithName), arg0, arg1)
}

// Error mocks base method
func (m *MockORM) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockORMMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockORM)(nil).Error))
}

// Exec mocks base method
func (m *MockORM) Exec(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockORMMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockORM)(nil).Exec), varargs...)
}

// First mocks base method
func (m *MockORM) First(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First
func (mr *MockORMMockRecorder) First(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockORM)(nil).First), arg0)
}

// HasTable mocks base method
func (m *MockORM) HasTable(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTable", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTable indicates an expected call of HasTable
func (mr *MockORMMockRecorder) HasTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTable", reflect.TypeOf((*MockORM)(nil).HasTable), arg0)
}

// Limit mocks base method
func (m *MockORM) Limit(arg0 interface{}) persistent.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", arg0)
	ret0, _ := ret[0].(persistent.ORM)
	return ret0
}

// Limit indicates an expected call of Limit
func (mr *MockORMMockRecorder) Limit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockORM)(nil).Limit), arg0)
}

// Offset mocks base method
func (m *MockORM) Offset(arg0 interface{}) persistent.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", arg0)
	ret0, _ := ret[0].(persistent.ORM)
	return ret0
}

// Offset indicates an expected call of Offset
func (mr *MockORMMockRecorder) Offset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockORM)(nil).Offset), arg0)
}

// Order mocks base method
func (m *MockORM) Order(arg0 interface{}) persistent.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", arg0)
	ret0, _ := ret[0].(persistent.ORM)
	return ret0
}

// Order indicates an expected call of Order
func (mr *MockORMMockRecorder) Order(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockORM)(nil).Order), arg0)
}

// Ping mocks base method
func (m *MockORM) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockORMMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockORM)(nil).Ping))
}

// RawSql mocks base method
func (m *MockORM) RawSql(arg0 string, arg1 ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawSql", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawSql indicates an expected call of RawSql
func (mr *MockORMMockRecorder) RawSql(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawSql", reflect.TypeOf((*MockORM)(nil).RawSql), varargs...)
}

// RawSqlWithObject mocks base method
func (m *MockORM) RawSqlWithObject(arg0 string, arg1 interface{}, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawSqlWithObject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RawSqlWithObject indicates an expected call of RawSqlWithObject
func (mr *MockORMMockRecorder) RawSqlWithObject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawSqlWithObject", reflect.TypeOf((*MockORM)(nil).RawSqlWithObject), varargs...)
}

// Rollback mocks base method
func (m *MockORM) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockORMMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockORM)(nil).Rollback))
}

// Search mocks base method
func (m *MockORM) Search(arg0 string, arg1 []string, arg2 []persistent.Criteria, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search
func (mr *MockORMMockRecorder) Search(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockORM)(nil).Search), arg0, arg1, arg2, arg3)
}

// Set mocks base method
func (m *MockORM) Set(arg0 string, arg1 interface{}) persistent.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(persistent.ORM)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockORMMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockORM)(nil).Set), arg0, arg1)
}

// SoftDelete mocks base method
func (m *MockORM) SoftDelete(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete
func (mr *MockORMMockRecorder) SoftDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockORM)(nil).SoftDelete), arg0)
}

// Table mocks base method
func (m *MockORM) Table(arg0 string) persistent.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", arg0)
	ret0, _ := ret[0].(persistent.ORM)
	return ret0
}

// Table indicates an expected call of Table
func (mr *MockORMMockRecorder) Table(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockORM)(nil).Table), arg0)
}

// UnderlyingDB mocks base method
func (m *MockORM) UnderlyingDB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnderlyingDB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// UnderlyingDB indicates an expected call of UnderlyingDB
func (mr *MockORMMockRecorder) UnderlyingDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnderlyingDB", reflect.TypeOf((*MockORM)(nil).UnderlyingDB))
}

// Update mocks base method
func (m *MockORM) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockORMMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockORM)(nil).Update), arg0)
}

// Where mocks base method
func (m *MockORM) Where(arg0 interface{}, arg1 ...interface{}) persistent.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(persistent.ORM)
	return ret0
}

// Where indicates an expected call of Where
func (mr *MockORMMockRecorder) Where(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockORM)(nil).Where), varargs...)
}
