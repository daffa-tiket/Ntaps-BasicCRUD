// Code generated by ntaps. DO NOT EDIT.
package infrastructure

import (
	"github.com/tiket/learn-crud/interfaces"
	"github.com/tiket/learn-crud/shared"
	"go.uber.org/dig"

	"fmt"

	swagger "github.com/swaggo/echo-swagger"
	_ "github.com/tiket/learn-crud/docs"

	pegawai_http "github.com/tiket/learn-crud/infrastructure/http/pegawai"
)

type (
	Holder struct {
		dig.In

		// - pegawai-http-start
		PegawaiController *pegawai_http.Controller
		// - pegawai-http-end

		SharedHolder     shared.Holder
		InterfacesHolder interfaces.Holder

		// - infrastructure-end
	}
)

func (h *Holder) ListenMessaging() {

}

func (h *Holder) ListenHttp() {

	RegisterMiddleware(h)

	h.SharedHolder.Echo.GET("/swagger/*", swagger.WrapHandler)

	// - pegawai-get-all-pegawai-http-start
	h.SharedHolder.Echo.GET("/pegawai", h.PegawaiController.GetAllPegawai)
	// - pegawai-get-all-pegawai-http-end

	// - pegawai-delete-pegawai-http-start
	h.SharedHolder.Echo.DELETE("/pegawai/:id", h.PegawaiController.DeletePegawai)
	// - pegawai-delete-pegawai-http-end

	// - pegawai-create-pegawai-http-start
	h.SharedHolder.Echo.POST("/pegawai", h.PegawaiController.CreatePegawai)
	// - pegawai-create-pegawai-http-end

	// - pegawai-update-pegawai-http-start
	h.SharedHolder.Echo.PUT("/pegawai/:id", h.PegawaiController.UpdatePegawai)
	// - pegawai-update-pegawai-http-end

	if err := h.SharedHolder.Echo.Start(fmt.Sprintf(":%d", h.SharedHolder.Config.EchoServerPort)); err != nil {
		if err.Error() == "http: Server closed" {
			h.SharedHolder.Logger.Info("closing echo http server")
		} else {
			h.SharedHolder.Logger.Errorf("failed to start echo http server %s", err)
		}
	}

	// - http-end

}

func (h *Holder) RunWorker() {

}
