// Code generated by ntaps. DO NOT EDIT.
// DO NOT ADD MORE STRUCT HERE!!
package config

import (
	"github.com/pkg/errors"
	tconf "github.com/tiket/TIX-HOTEL-UTILITIES-GO/config"
)

type (
	EnvConfiguration struct {

		// - logger-config-start

		LoggerFileName string `envconfig:"LOGGER_FILE_NAME"`

		LoggerFormater string `envconfig:"LOGGER_FORMATTER" default:"TEXT" required:"true"`

		LoggerLevel string `envconfig:"LOGGER_LEVEL" default:"INFO" required:"true"`

		LoggerMaxSize int `envconfig:"LOGGER_MAX_SIZE" default:"400" required:"true"`

		LoggerMaxBackups int `envconfig:"LOGGER_MAX_BACKUPS" default:"0" required:"true"`

		LoggerMaxAge int `envconfig:"LOGGER_MAX_AGE" default:"7" required:"true"`

		LoggerCompress bool `envconfig:"LOGGER_COMPRESS" default:"true" required:"true"`

		// - logger-config-end

		// - postgres-config-start

		SqlConnectionUri string `envconfig:"SQL_CONNECTION_URI" default:"host=localhost port=5432 dbname=learn_crudsslmode=disable"`

		SqlMaxIdleConnection int `envconfig:"SQL_MAX_IDLE_CONNECTION" default:"4"`

		SqlMaxOpenConnection int `envconfig:"SQL_MAX_OPEN_CONNECTION" default:"8"`

		SqlConnMaxLifetime string `envconfig:"SQL_CONN_MAX_LIFETIME" default:"300s"`

		SqlLogMode bool `envconfig:"MYSQL_LOG_MODE" default:"false"`

		// - postgres-config-end

		// - echo-config-start

		EchoServerPort int `envconfig:"ECHO_SERVER_PORT" default:"9000"`

		// - echo-config-end

		// - end-of-config
	}
)

func NewEnvConfiguration() (*EnvConfiguration, error) {
	configuration := EnvConfiguration{}

	if err := tconf.NewFromEnv(&configuration); err != nil {
		return nil, errors.Wrap(err, "failed to provide env config")
	}

	return &configuration, nil
}
